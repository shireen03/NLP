{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "53ba36aa-58cd-4b1a-8c66-f5bfc465b7d1",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "53ba36aa-58cd-4b1a-8c66-f5bfc465b7d1",
        "outputId": "97bbf765-ba14-49d4-bd22-75b5ea19823d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                                  review sentiment\n",
            "0      One of the other reviewers has mentioned that ...  positive\n",
            "1      A wonderful little production. <br /><br />The...  positive\n",
            "2      I thought this was a wonderful way to spend ti...  positive\n",
            "3      Basically there's a family where a little boy ...  negative\n",
            "4      Petter Mattei's \"Love in the Time of Money\" is...  positive\n",
            "...                                                  ...       ...\n",
            "49995  I thought this movie did a down right good job...  positive\n",
            "49996  Bad plot, bad dialogue, bad acting, idiotic di...  negative\n",
            "49997  I am a Catholic taught in parochial elementary...  negative\n",
            "49998  I'm going to have to disagree with the previou...  negative\n",
            "49999  No one expects the Star Trek movies to be high...  negative\n",
            "\n",
            "[50000 rows x 2 columns]\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv('IMDB Dataset.csv')\n",
        "\n",
        "print(df)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "id": "5931d270-1489-49b6-bdbc-6b6d6dd36085",
      "metadata": {
        "id": "5931d270-1489-49b6-bdbc-6b6d6dd36085",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "42f1a725-fe12-4c36-f2f2-8495c3c7b56c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: nltk in /usr/local/lib/python3.10/dist-packages (3.8.1)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (from nltk) (8.1.3)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from nltk) (1.2.0)\n",
            "Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.10/dist-packages (from nltk) (2022.10.31)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from nltk) (4.65.0)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "!pip install nltk\n",
        "import nltk\n",
        "nltk.download('stopwords')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "id": "5ac693fc-512e-43ea-854c-7db6e3e4e0ba",
      "metadata": {
        "id": "5ac693fc-512e-43ea-854c-7db6e3e4e0ba"
      },
      "outputs": [],
      "source": [
        "import re   \n",
        "import string\n",
        "from nltk.stem import SnowballStemmer    \n",
        "from nltk.corpus import stopwords  \n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "def text_preprocess(text, stop=True, stem_words=True):\n",
        "    # Empty question\n",
        "    if type(text) != str or text == '':\n",
        "        return ''\n",
        "\n",
        "    # Making token lowercase\n",
        "    text = text.lower()\n",
        "    \n",
        "    # Remove HTML tags\n",
        "    text = re.sub(\" <br />\", \"\", text, flags=re.IGNORECASE)\n",
        "    text = re.sub(\" <br /><br />\", \"\", text, flags=re.IGNORECASE)\n",
        "\n",
        "\n",
        "\n",
        "    # Remove punctuation\n",
        "    no_punctuation = ''\n",
        "    for char in text:\n",
        "      if char not in string.punctuation:\n",
        "        no_punctuation += char\n",
        "\n",
        "    text = no_punctuation\n",
        "\n",
        "    # turn into list of words seperated by space\n",
        "    text = text.split(\" \")\n",
        "\n",
        "    #removing stop words\n",
        "    if stop:\n",
        "      stop_words = stopwords.words('english')\n",
        "      no_stoplist = []\n",
        "      for word in text:\n",
        "        if word not in stop_words:\n",
        "            no_stoplist.append(word)\n",
        "\n",
        "      text = no_stoplist\n",
        "\n",
        "\n",
        "    # Stemming if stem_words is true\n",
        "    if stem_words:\n",
        "      stemmer = SnowballStemmer('english')\n",
        "      stemlist = []\n",
        "      for word in text:\n",
        "        stemmed_word = stemmer.stem(word)\n",
        "        stemlist.append(stemmed_word)\n",
        "\n",
        "      text = stemlist\n",
        "\n",
        "    \n",
        "    return text\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "# Label encoding\n",
        "label = LabelEncoder()\n",
        "df['sentiment'] = label.fit_transform(df['sentiment'])\n",
        "#preprocessing data\n",
        "\n",
        "df['review'] = df['review'].apply(text_preprocess)\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "6aBVPs7AcEKw"
      },
      "id": "6aBVPs7AcEKw",
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(df)"
      ],
      "metadata": {
        "id": "ip28XiX2l4bW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "41c9a85b-33d6-4f74-b1f9-eb9524d9dbc4"
      },
      "id": "ip28XiX2l4bW",
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                                  review  sentiment\n",
            "0      [one, review, mention, watch, 1, oz, episod, y...          1\n",
            "1      [wonder, littl, productionbr, film, techniqu, ...          1\n",
            "2      [thought, wonder, way, spend, time, hot, summe...          1\n",
            "3      [basic, there, famili, littl, boy, jake, think...          0\n",
            "4      [petter, mattei, love, time, money, visual, st...          1\n",
            "...                                                  ...        ...\n",
            "49995  [thought, movi, right, good, job, wasnt, creat...          1\n",
            "49996  [bad, plot, bad, dialogu, bad, act, idiot, dir...          0\n",
            "49997  [cathol, taught, parochi, elementari, school, ...          0\n",
            "49998  [im, go, disagre, previous, comment, side, mal...          0\n",
            "49999  [one, expect, star, trek, movi, high, art, fan...          0\n",
            "\n",
            "[50000 rows x 2 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['review'] = df['review'].apply(lambda x: ' '.join(x))"
      ],
      "metadata": {
        "id": "0uQvJnU-Pjpf"
      },
      "id": "0uQvJnU-Pjpf",
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(df)"
      ],
      "metadata": {
        "id": "IA2V7qcFMWAb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fb3c5cc7-841a-4544-fe89-6c50ada381cf"
      },
      "id": "IA2V7qcFMWAb",
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                                  review  sentiment\n",
            "0      one review mention watch 1 oz episod youll hoo...          1\n",
            "1      wonder littl productionbr film techniqu unassu...          1\n",
            "2      thought wonder way spend time hot summer weeke...          1\n",
            "3      basic there famili littl boy jake think there ...          0\n",
            "4      petter mattei love time money visual stun film...          1\n",
            "...                                                  ...        ...\n",
            "49995  thought movi right good job wasnt creativ orig...          1\n",
            "49996  bad plot bad dialogu bad act idiot direct anno...          0\n",
            "49997  cathol taught parochi elementari school nun ta...          0\n",
            "49998  im go disagre previous comment side maltin one...          0\n",
            "49999  one expect star trek movi high art fan expect ...          0\n",
            "\n",
            "[50000 rows x 2 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "36bb866b-ed97-4b1e-bfb2-753cad9a9245",
      "metadata": {
        "id": "36bb866b-ed97-4b1e-bfb2-753cad9a9245"
      },
      "outputs": [],
      "source": [
        "\n",
        "!pip install tensorflow\n",
        "!pip install keras\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "id": "cf965a83-cb84-400b-b970-981a5f349538",
      "metadata": {
        "id": "cf965a83-cb84-400b-b970-981a5f349538",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c3d076a8-946f-46b0-ce71-0fb14ea6f6d7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "625/625 [==============================] - 1394s 2s/step - loss: 0.3446 - accuracy: 0.8459 - val_loss: 0.2666 - val_accuracy: 0.8919\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f418eeaf3d0>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Tokenization\n",
        "tokenizeit = Tokenizer()\n",
        "tokenizeit.fit_on_texts(df['review'])\n",
        "toNumeric = tokenizeit.texts_to_sequences(df['review'])\n",
        "\n",
        "# Padding sequences\n",
        "max = 0\n",
        "for sequence in toNumeric:\n",
        "    if len(sequence) > max:\n",
        "        max = len(sequence)\n",
        "X = pad_sequences(toNumeric, max)\n",
        "# Labels\n",
        "y = df['sentiment'].values\n",
        "\n",
        "# Splitting the dataset\n",
        "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# the model\n",
        "model = Sequential()\n",
        "model.add(Embedding(input_dim=len(tokenizeit.word_index)+1, output_dim=32, input_length=max))\n",
        "model.add(LSTM(64, return_sequences=True))\n",
        "model.add(LSTM(32))\n",
        "model.add(Dense(1, activation='sigmoid'))\n",
        "\n",
        "# Compile the model\n",
        "model.compile(loss='binary_crossentropy', optimizer=Adam(), metrics=['accuracy'])\n",
        "\n",
        "# Training\n",
        "model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=1, batch_size=64)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.save('model.h5')\n"
      ],
      "metadata": {
        "id": "NzVkM2-lFJSo"
      },
      "id": "NzVkM2-lFJSo",
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "model_path = 'model.h5'\n",
        "\n",
        "# Check if the file exists\n",
        "if os.path.isfile(model_path):\n",
        "    print(\"File exists\")\n",
        "else:\n",
        "    print(\"File does not exist\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "654pY1IJ-5Gp",
        "outputId": "6a79a3d8-c8b5-498a-84ef-5b9e839e704c"
      },
      "id": "654pY1IJ-5Gp",
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "File exists\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.models import load_model\n",
        "\n",
        "# Specify the path\n",
        "model_path = 'model.h5'\n",
        "\n",
        "# Load the model from the path\n",
        "loaded_model = load_model(model_path)\n"
      ],
      "metadata": {
        "id": "-N9OivyANG50"
      },
      "id": "-N9OivyANG50",
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        "\n",
        "# Predict on the validation set\n",
        "y_pred2 = model.predict(X_val)\n",
        "for i in range(len(y_pred2)):\n",
        "  if y_pred2[i]>0.7:\n",
        "    y_pred2[i]=1\n",
        "  else:\n",
        "    y_pred2[i]=0\n",
        "\n",
        "# Generate classification report\n",
        "report = classification_report(y_val, y_pred2)\n",
        "print(report)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M1h1H2BmkNgW",
        "outputId": "5c63bad9-6b60-4b2e-97be-13b2b5b7d47a"
      },
      "id": "M1h1H2BmkNgW",
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "313/313 [==============================] - 122s 386ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.80      0.96      0.87      4961\n",
            "           1       0.95      0.76      0.85      5039\n",
            "\n",
            "    accuracy                           0.86     10000\n",
            "   macro avg       0.88      0.86      0.86     10000\n",
            "weighted avg       0.88      0.86      0.86     10000\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        "\n",
        "# Predict on the validation set\n",
        "y_pred3 = model.predict(X_val)\n",
        "for i in range(len(y_pred3)):\n",
        "  if y_pred3[i]>0.6:\n",
        "    y_pred3[i]=1\n",
        "  else:\n",
        "    y_pred3[i]=0\n",
        "\n",
        "# Generate classification report\n",
        "report = classification_report(y_val, y_pred3)\n",
        "print(report)"
      ],
      "metadata": {
        "id": "ZfgkT7LU_tpK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "664655a5-e839-4ec8-81d4-6970f74875bb"
      },
      "id": "ZfgkT7LU_tpK",
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "313/313 [==============================] - 131s 417ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.84      0.94      0.89      4961\n",
            "           1       0.94      0.82      0.87      5039\n",
            "\n",
            "    accuracy                           0.88     10000\n",
            "   macro avg       0.89      0.88      0.88     10000\n",
            "weighted avg       0.89      0.88      0.88     10000\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        "\n",
        "# convert the probability into integer. The threshold (0.5)\n",
        "y_pred = model.predict(X_val)\n",
        "for i in range(len(y_pred)):\n",
        "  if y_pred[i]>0.5:\n",
        "    y_pred[i]=1\n",
        "  else:\n",
        "    y_pred[i]=0\n",
        "\n",
        "\n",
        "# Generate classification report\n",
        "report = classification_report(y_val, y_pred)\n",
        "print(report)"
      ],
      "metadata": {
        "id": "Iswo6fA8JsxE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c8054acf-a5f8-4aa7-933f-0d069b81b43d"
      },
      "id": "Iswo6fA8JsxE",
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "313/313 [==============================] - 146s 466ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.87      0.92      0.89      4961\n",
            "           1       0.92      0.86      0.89      5039\n",
            "\n",
            "    accuracy                           0.89     10000\n",
            "   macro avg       0.89      0.89      0.89     10000\n",
            "weighted avg       0.89      0.89      0.89     10000\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        "\n",
        "# Predict on the validation set\n",
        "y_pred4 = model.predict(X_val)\n",
        "for i in range(len(y_pred4)):\n",
        "  if y_pred4[i]>0.4:\n",
        "    y_pred4[i]=1\n",
        "  else:\n",
        "    y_pred4[i]=0\n",
        "\n",
        "# Generate classification report\n",
        "report = classification_report(y_val, y_pred4)\n",
        "print(report)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HEeYBs-Wa1cB",
        "outputId": "e77c6298-26fa-4f98-9895-bdfd0e717b38"
      },
      "id": "HEeYBs-Wa1cB",
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "313/313 [==============================] - 132s 420ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.90      0.89      0.90      4961\n",
            "           1       0.90      0.90      0.90      5039\n",
            "\n",
            "    accuracy                           0.90     10000\n",
            "   macro avg       0.90      0.90      0.90     10000\n",
            "weighted avg       0.90      0.90      0.90     10000\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        "\n",
        "# Predict on the validation set\n",
        "y_pred5 = model.predict(X_val)\n",
        "for i in range(len(y_pred5)):\n",
        "  if y_pred5[i]>0.3:\n",
        "    y_pred5[i]=1\n",
        "  else:\n",
        "    y_pred5[i]=0\n",
        "\n",
        "# Generate classification report\n",
        "report = classification_report(y_val, y_pred5)\n",
        "print(report)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bF3kXi2skD9Y",
        "outputId": "004143a4-1858-4218-9317-5d71884ea079"
      },
      "id": "bF3kXi2skD9Y",
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "313/313 [==============================] - 133s 426ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.92      0.86      0.89      4961\n",
            "           1       0.87      0.93      0.90      5039\n",
            "\n",
            "    accuracy                           0.89     10000\n",
            "   macro avg       0.90      0.89      0.89     10000\n",
            "weighted avg       0.90      0.89      0.89     10000\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "thresholds = [0.3,0.4,0.5,0.6, 0.7]\n",
        "accuracies = [0.89, 0.9, 0.89,0.88,0.86]\n",
        "precisions0 = [0.92, 0.9, 0.87,0.84, 0.80]\n",
        "recalls0 = [0.86, 0.89, 0.92,0.94, 0.96]\n",
        "f10 = [0.89, 0.9, 0.89,0.89,0.87]\n",
        "\n",
        "width = 0.1\n",
        "\n",
        "x = np.arange(len(thresholds))\n",
        "\n",
        "plt.bar(x - 3 * width, accuracies, width, label='Accuracy')\n",
        "plt.bar(x - 2 * width, precisions0, width, label='Precision')\n",
        "plt.bar(x - width, recalls0, width, label='Recall')\n",
        "plt.bar(x, f10, width, label='F1 score')  \n",
        "\n",
        "plt.xlabel('LSTM Threshold')\n",
        "plt.ylabel('Value')\n",
        "plt.title('Performance Metrics vs. Threshold for class 0')\n",
        "plt.xticks(x, thresholds)\n",
        "plt.legend(loc='lower right')\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "d5vgql57A891",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 474
        },
        "outputId": "e3cee659-6b92-4a00-b870-95004ff71c0c"
      },
      "id": "d5vgql57A891",
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "thresholds = [0.3,0.4,0.5,0.6, 0.7]\n",
        "accuracies = [0.89, 0.9, 0.89,0.88,0.86]\n",
        "precisions1 = [0.87, 0.9, 0.92,0.94, 0.95]\n",
        "recalls1 = [0.93, 0.9, 0.86,0.82, 0.76]\n",
        "f11 = [0.9, 0.9, 0.89,0.87,0.85]\n",
        "\n",
        "\n",
        "# Define the width of each bar\n",
        "width = 0.1\n",
        "\n",
        "# Create an array of indices for positioning the bars\n",
        "x = np.arange(len(thresholds))\n",
        "\n",
        "# Plotting the metrics as bar plots\n",
        "plt.bar(x - 3 * width, accuracies, width, label='Accuracy')\n",
        "plt.bar(x - 2 * width, precisions1, width, label='Precision class 1')\n",
        "plt.bar(x - width, recalls1, width, label='Recall class 1')\n",
        "plt.bar(x, f11, width, label='F1 score class 1')\n",
        "\n",
        "plt.xlabel('LSTM Threshold')\n",
        "plt.ylabel('Value')\n",
        "plt.title('Performance Metrics vs. Threshold for class 1')\n",
        "plt.xticks(x, thresholds)\n",
        "plt.legend(loc='lower right')\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "0xZAznKlGxM6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 474
        },
        "outputId": "cf4d8452-c22f-4995-ce20-e8269fc4d297"
      },
      "id": "0xZAznKlGxM6",
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install keras"
      ],
      "metadata": {
        "id": "gh8k4M_eVQxy"
      },
      "id": "gh8k4M_eVQxy",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn import svm\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# converting to TF-IDF\n",
        "vectorizer = TfidfVectorizer()\n",
        "X = vectorizer.fit_transform(df['review'])\n",
        "\n",
        "y = df['sentiment'].values\n",
        "\n",
        "# splitting the dataset\n",
        "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "modelsvm = svm.SVC(kernel='linear')\n",
        "modelsvm.fit(X_train, y_train)\n"
      ],
      "metadata": {
        "id": "KwpnbGiaL0zk",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 92
        },
        "outputId": "5865a4d1-57be-451a-97d6-44678d3cf923"
      },
      "id": "KwpnbGiaL0zk",
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(kernel='linear')"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(kernel=&#x27;linear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(kernel=&#x27;linear&#x27;)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "predictions = modelsvm.predict(X_val)\n",
        "\n",
        "# report metrics\n",
        "print(classification_report(y_val, predictions))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hR8nbE8GreB5",
        "outputId": "da520c37-9168-4f5c-8dbc-bfe5dc151858"
      },
      "id": "hR8nbE8GreB5",
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.91      0.88      0.89      4961\n",
            "           1       0.89      0.91      0.90      5039\n",
            "\n",
            "    accuracy                           0.90     10000\n",
            "   macro avg       0.90      0.90      0.90     10000\n",
            "weighted avg       0.90      0.90      0.90     10000\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from joblib import dump, load\n",
        "\n",
        "# Save the model\n",
        "dump(modelsvm, 'svm_model.joblib') \n",
        "\n",
        "# Load the model\n",
        "loaded_model = load('svm_model.joblib') \n"
      ],
      "metadata": {
        "id": "a07Mf5hZrGod"
      },
      "id": "a07Mf5hZrGod",
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.stats.contingency_tables import mcnemar\n",
        "import numpy as np\n",
        "\n",
        "y_true = np.array(y_val)\n",
        "y_svm = np.array(predictions)\n",
        "y_lstm = np.squeeze(np.array(y_pred)) \n",
        "\n",
        "\n",
        "notpredicted=np.sum((y_svm!=y_true)&(y_lstm!=y_true))\n",
        "bothpredicted=np.sum((y_svm== y_true)&(y_lstm == y_true))\n",
        "lstmpredicted=np.sum((y_svm!= y_true)&(y_lstm== y_true))\n",
        "svmpredicted=np.sum((y_svm==y_true)&(y_lstm!= y_true))\n",
        "\n",
        "table=np.zeros((2, 2))\n",
        "table[0,0]=bothpredicted\n",
        "table[0,1]=svmpredicted\n",
        "table[1,0]=lstmpredicted\n",
        "table[1,1]=notpredicted\n",
        "\n",
        "result= mcnemar(table, exact=True)\n",
        "\n",
        "print(result.statistic, result.pvalue)\n",
        "\n"
      ],
      "metadata": {
        "id": "VLe6dWUhcg51",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "37566d43-34d5-446a-dae9-57a77568def6"
      },
      "id": "VLe6dWUhcg51",
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "345.0 0.08354391074087013\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(bothpredicted)\n",
        "print(lstmpredicted)\n",
        "print(svmpredicted)\n",
        "print(notpredicted)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wKWon6lGOjrF",
        "outputId": "817ba4a7-dc9a-4213-820a-8be3e0414a6b"
      },
      "id": "wKWon6lGOjrF",
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8574\n",
            "345\n",
            "393\n",
            "688\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('Contingency table:')\n",
        "print(table)\n",
        "print(predictions)\n",
        "print(y_pred)\n"
      ],
      "metadata": {
        "id": "j5o_nN3Xm3z0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "29b8c452-590f-46c0-8ad6-e108e1b37a21"
      },
      "id": "j5o_nN3Xm3z0",
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Contingency table:\n",
            "[[8574.  393.]\n",
            " [ 345.  688.]]\n",
            "[0 1 0 ... 1 0 1]\n",
            "[[0.]\n",
            " [1.]\n",
            " [0.]\n",
            " ...\n",
            " [1.]\n",
            " [0.]\n",
            " [1.]]\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.12"
    },
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}